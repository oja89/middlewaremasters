#!/usr/bin/env python

import collections
import socket
import struct
import sys
import json
import time

MCAST_ADDR = "224.1.1.1"
MCAST_PORT = 5008
MULTICAST_TTL = 8

PAUSE = 0
PLAY = 1
JUMPTO = 2
GOTOURL = 3

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

def get_dev_ipaddr():
    testsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    testsock.connect(("8.8.8.8", 80))
    ipaddr = testsock.getsockname()[0]
    testsock.close()
    return ipaddr

def listen_socket():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(("", MCAST_PORT))
    mreq = struct.pack("4sl", socket.inet_aton(MCAST_ADDR), socket.INADDR_ANY)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
    return sock

def send_message(message):
    #Modified from https://github.com/mdn/webextensions-examples/tree/master/native-messaging
    encodedMessage = json.dumps(message).encode('utf-8')
    # Write message size.
    sys.stdout.buffer.write(struct.pack('@I', len(encodedMessage)))
    # Write the message itself.
    sys.stdout.buffer.write(encodedMessage)
    sys.stdout.buffer.flush()


ownip = get_dev_ipaddr()
sock = listen_socket()
sock.setblocking(0)

#Create objects for data
nodes = {}
session = False
nodecommands = collections.defaultdict(list)
sessions = []

while True:
    try:
        data, client = sock.recvfrom(10240)
        data = data.decode("utf-8")
        send_message("Received " + data)
        #print(data)
        #sock.sendto("Viesti saatu joten vastataan HÖHÖ".encode("utf-8"), (MCAST_ADDR, MCAST_PORT))

    except BlockingIOError:
        #send_message("No message, analyzing statuses")
        time.sleep(0.1)
        swarmsize = len(nodes) #how many nodes in group
        if swarmsize == 0:
            #nothing happening
            continue
        #No message in buffer
        #print("No message")
        #TODO: Add application logic here

        #Check status of nodecommands
        #if this node has to do something, send message to extension

        keylist = list(nodecommands.keys())
        for cmd in keylist:
            #if the command is over 30 seconds old, remove it
            if (time.time() - nodecommands[cmd][0] > 30):
                nodecommands.pop(cmd)
                continue
            #if over half of the nodes agree
            if (len(nodecommands[cmd]) - 1 > swarmsize / 2):
                if (cmd.split(";")[0] == ownip):
                    send_message(cmd.split(";", 1)[1])       
                nodecommands.pop(cmd)
        #Check status of nodes
        #if logic dictates a node needs to do something, send message using socket to all nodes
        #send_message("Commands checked, start logic")

        #Check the video URL
        videos = []
        vid_dict = {}
        for key in nodes.keys():
            video = nodes[key]["baseURI"]
            videos.append((video, key))
           
            if video not in vid_dict:
                vid_dict[video] = 1
            else: 
                vid_dict[video] += 1
        #send_message("Vid dict built")
        if len(vid_dict) > 1:
            max_amount = -9999
            for key in vid_dict.keys():
                amount = vid_dict[key]
                max_amount = max(amount, max_amount)
                if max_amount == vid_dict[key]:
                    real_vid = key
            for key in nodes.keys():
                if nodes[key]['baseURI'] != real_vid:
                    msg = {"command": key + ";" + str(GOTOURL) + ";" + real_vid}
                    jstring = json.dumps(msg)
                    sock.sendto((sessionid + ";" + jstring).encode("utf-8"), (MCAST_ADDR, MCAST_PORT))
        #send_message("URLs checked")
        #Check the video timestamps
        timestamps = []
        for key in nodes.keys():
            timestamps.append(nodes[key]['currentTime'])

        #Only do something if the difference between different timestamps is over 3 seconds
        
        if max(timestamps) - min(timestamps) > 3:

            #Average of the timestamps
            avr_timestamp = sum(timestamps) / len(timestamps)
            distances = []
            #The node with the minimum distance to the average timestamp is "in the right timespot" 
            for key in nodes.keys():
                distance_timestamp = abs(nodes[key]['currentTime'] - avr_timestamp)
                distances.append((distance_timestamp, key))
            real_node = min(distances, key = lambda t: t[0])
            real_timestamp = (nodes[real_node[1]]['currentTime'], real_node[1])
            #If a node is over 3 seconds away from the "correct timestamp", multicast
            for key in nodes.keys():
                if abs(real_timestamp[0] - nodes[key]['currentTime']) > 3:
                    msg = {'command': key + ";" + str(JUMPTO) + ";" + str(real_timestamp[0])}
                    jstring = json.dumps(msg)
                    sock.sendto((sessionid + ";" + jstring).encode("utf-8"), (MCAST_ADDR, MCAST_PORT))

        #send_message("Timestamps checked")
        #Check if nodes are paused/playing
        videostates = {0: 0, 1: 0}
        for key in nodes.keys():
            if nodes[key]["paused"] == 0:
                videostates[0] += 1
            else:
                videostates[1] += 1

        if videostates[0] > videostates[1]:
            #Session agreement is PAUSE
            for key in nodes.keys():
                if nodes[key]["paused"] == 1:
                    msg = {"command": key + ";" + str(PLAY)}
                    jstring = json.dumps(msg)
                    sock.sendto((sessionid + ";" + jstring).encode("utf-8"), (MCAST_ADDR, MCAST_PORT))
        elif videostates[1] > videostates[0]:
            #Session agreement is PLAY
            for key in nodes.keys():
                if nodes[key]["paused"] == 0:
                    msg = {"command": key + ";" + str(PAUSE)}
                    jstring = json.dumps(msg)
                    sock.sendto((sessionid + ";" + jstring).encode("utf-8"), (MCAST_ADDR, MCAST_PORT))


            
                


            
        


        
        
        
        #send_message("Logic finished")
        #Application logic finished, check socket buffer again
        #time.sleep(0.1)
        continue
        #send_message()
    else:
        #Message was in buffer
        try:
            sessionid, obj = data.split(";", 1)
            #send_message("Split to " + sessionid + " and " + obj)
        except ValueError:
            #Invalid message
            continue
        #send_message(client)
        if sessionid not in sessions:
            sessions.append(sessionid)
            msg = {}
            msg['sessions'] = sessions
            send_message('sessions;' + json.dumps(msg))
        if not session:
            #send_message("Comparing: " + client[0] + " vs " + ownip)
            if client[0] == ownip:
                send_message("Session chosen = " + sessionid)
                session = sessionid
            else:
                continue
        if sessionid != session:
            continue
        
        if obj == 0:
            #Force pause command
            send_message(str(PAUSE))
        elif obj == 1:
            #Force play command
            send_message(str(PLAY))
        try:
            json_obj = json.loads(obj)
        except ValueError:
            #Not json
            continue
        #send_message("Obj loaded")
        try:
            nodecmd = json_obj["command"]
            #Commands are added to object here
            if client not in nodecommands[nodecmd]:
                if len(nodecommands[nodecmd]) == 0:
                    nodecommands[nodecmd].append(time.time()) #first timestamp, if this is too old remove commands
                nodecommands[nodecmd].append(client) #Check length of this list for agreement between nodes, length is amount of nodes + 1
            
        except KeyError:
            #No commands, json is the latest status of a node
            nodes[client[0]] = json_obj
        continue
        
