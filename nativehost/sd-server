#!/usr/bin/env python

import socket
import struct
import sys
import json
import time

#Multicast address and port have to match with servicediscovery_client.py on other units
MCAST_ADDR = "224.1.1.1"
MCAST_PORT = 5008

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

def get_dev_ipaddr():
    testsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    testsock.connect(("8.8.8.8", 80))
    ipaddr = testsock.getsockname()[0]
    testsock.close()
    return ipaddr

def listen_socket():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(("", MCAST_PORT))
    mreq = struct.pack("4sl", socket.inet_aton(MCAST_ADDR), socket.INADDR_ANY)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
    return sock

def send_message(message):
    #Modified from https://github.com/mdn/webextensions-examples/tree/master/native-messaging
    encodedMessage = json.dumps(message).encode('utf-8')
    # Write message size.
    sys.stdout.buffer.write(struct.pack('@I', len(encodedMessage)))
    # Write the message itself.
    sys.stdout.buffer.write(encodedMessage)
    sys.stdout.buffer.flush()


ownip = get_dev_ipaddr()
sock = listen_socket()
sock.setblocking(0)

#Create objects for data
nodes = {}
session = False

while True:
    try:
        data, client = sock.recvfrom(10240)
        data = data.decode("utf-8")

    except BlockingIOError:
        #No message in buffer
        #print("No message")
        #Add logic here
        time.sleep(0.1)
        continue
        #send_message()
    else:
        #Message was in buffer
        try:
            sessionid, obj = data.split(";", 1)
        except ValueError:
            #Invalid message
            continue
        send_message(client)
        if not session:
            if client == ownip:
                session = sessionid
            else:
                continue
        if sessionid != session:
            continue
        json_obj = json.loads(obj)
        try:
            nodecmd = json_obj["command"]
            #TODO: Implement commands here
            nodes[client] = json_obj
        except KeyError:
            #No commands
            nodes[client] = json_obj
        continue
        
